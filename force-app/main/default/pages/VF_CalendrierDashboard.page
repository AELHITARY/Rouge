<apex:page title="Débrief rapide" sidebar="false" docType="html-5.0" controller="Ctrl_CalendrierDashboard" action="{!insertUserStats}">
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
    <apex:includeScript value="{!URLFOR($Resource.JQuery_js, 'JQuery/jquery-1.11.1.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.JQuery_js, 'JQuery/jquery.mobile.1.4.5.touch.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.bootstrapDatepicker_js, 'js/bootstrap-datepicker.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.bootstrapDatepicker_js, 'js/locales/bootstrap-datepicker.fr.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.FullCalendar, 'lib/moment.min.js')}" />
    <script type="text/javascript">
        j$ = jQuery.noConflict();
        var actualDay = new Date();
        var htmlLoadingEvent;
        var htmlBodyEvent;
        var htmlLoadingTask;
        var htmlBodyTask;
        
        // Statuts RDV
        var annuleCallStatut = 'Annulé Call';
        var deplaceStatut = 'Déplacé';
        var effectueStatut = 'Effectué';
        var nonConfirmeStatut = 'Non confirmé';
        var nonEffectueStatut = 'Non effectué';
        var nonEffectueDeplacementStatut = 'Non effectué (avec déplacement)';
        var prisStatut = 'Pris';

        /////////////////
        //   ON LOAD   //
        /////////////////
        j$(document).ready(function(){
            htmlLoadingTask = j$("#loading-task");
            htmlBodyTask = j$("#panelTask-body");
            htmlLoadingEvent = j$("#loading-event");
            htmlBodyEvent = j$("#panelEvent-body");

            // Initialisation des fonction jQuery mobile pour l'action "Swipe" pour mobile
            if(isMobile()) {
                $(document).on( "swipeleft", switchDay );
                $(document).on( "swiperight", switchDay );
            }

            var momentDay = moment('{!selectedDate}', 'DD-MM-YYYY');
            if(momentDay.isValid()){
                actualDay = new Date(momentDay.year(), momentDay.month(), momentDay.date());
            }
            // Init du datepicker
            $('#input-datetimepicker-start').datepicker({
                format: "dd/mm/yyyy",
                language: "fr",
                autoclose: true,
                todayHighlight: true,
                showOnFocus: false
            });
            $('#input-datetimepicker-start').datepicker().on('changeDate', function(e){
                switchDay(e.date.toLocaleDateString());
            });
            // Fermeture et MAJ des couleurs de chaque Panel
            switchDay('today');
            setupEventColors();
            j$('.panel-collapse').collapse("hide");
        });

        /*--------------------------------------------------*/
        /*  FONCTION DE CHANGEMENT DE JOUR                  */
        /*--------------------------------------------------*/
        function switchDay( event ){
            // Chargement
            toggleLoading(true, 'task');
            toggleLoading(true, 'event');

            // Cas du swipe ou clic
            if(event.type == 'swipeleft' || event == 'clickright') actualDay.setDate(actualDay.getDate()+1);
            else if(event.type == 'swiperight' || event == 'clickleft') actualDay.setDate(actualDay.getDate()-1);
            else if(event == 'today') {}
            else {
                if((typeof sforce != 'undefined') && (sforce != null)){
                    var listeMois = ['janvier','février','mars','avril','mai','juin','juillet','août','septembre','octobre','novembre','décembre'];
                    for(var i=0; i<listeMois.length;i++){
                        event = event.replace(' ' + listeMois[i] + ' ', '/' + [i+1] + '/');
                    }
                }
                var tempDate = moment(event, 'DD-MM-YYYY');
                actualDay.setDate(tempDate.date());
                actualDay.setMonth(tempDate.month());
                actualDay.setFullYear(tempDate.year());
            }

            // Mise à jour du datepicker
            $('#input-datetimepicker-start').datepicker('update', new Date(actualDay.getFullYear(), actualDay.getMonth(), actualDay.getDate()));

            var jour = actualDay.getDate();
            var mois = actualDay.getMonth();
            var annee = actualDay.getFullYear();

            // Récupère les évènements d'un jour donné
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.Ctrl_CalendrierDashboard.getSelectedEvents}', jour, mois, annee,
                function(result, event) {
                    if (event.status) {
                        // Mise à jour des indicateurs d'évènements
                        var content = '';
                        var ev = result;
                        var mutedDate = 'Evènements pour le ' + moment(actualDay).format("DD/MM/YYYY");
                        j$('[id=nbEvents]').html(ev.length);
                        j$('[id=mutedEventDay]').html(mutedDate);

                        // Chargement des options pour les picklists
                        var statutRDVList = JSON.parse('{!JSENCODE(statutList)}');

                        // Cas avec au moins 1 event
                        if(ev.length){
                            j$('#noEvents').removeClass("show").addClass("hidden");
                            for (i=0;i<ev.length;i++) {
                                // Formatage date
                                var date = formatDate(ev[i].StartDateTime);
                                // Formatage picklist "Résultat du RDV" en fonction du type de "Statut du RDV"
                                var resultatRDVList = getNewPickListValues(ev[i].StatutRDV__c)
                                // Vérification si les variables ne sont pas nulles
                                ev[i].ResultatduRDV__c = isDefined(ev[i].ResultatduRDV__c, 'Non renseigné');
                                var motifAnnulation = '';

                                // Récupération du champ de motif adéquat au résultat du RDV
                                if(ev[i].ResultatduRDV__c == 'Annulé/client avec report de RDV' || ev[i].ResultatduRDV__c == 'Annulé/client sans report de RDV' ||
                                ev[i].ResultatduRDV__c == 'Refus de visite' || ev[i].ResultatduRDV__c == 'imprévu dernière minute' || ev[i].ResultatduRDV__c == 'Absent/A rappeler') motifAnnulation = isDefined(ev[i].Motifsannulationclient__c, '');
                                if(ev[i].ResultatduRDV__c == 'Non devisable') motifAnnulation = isDefined(ev[i].MotifsAnnulationnondevisable__c, '');
                                if(ev[i].ResultatduRDV__c == 'Annulé/vendeur') motifAnnulation = isDefined(ev[i].Motifsannulationvendeur__c, '');

                                // INJECTION-HEADER
                                content += '<div class="panel panel-default">';
                                content += '    <div class="panel-heading ' + isDefined(ev[i].Type, '?') + ' ' + ev[i].RecordTypeId + '" role="tab">';
                                content += '        <h4 class="panel-title">';

                                if(ev[i].RecordTypeId == '{!rtEventProspection}'){
                                    if(ev[i].debriefe__c)   content += '<span class="lisere DebriefeOui"></span>';
                                    else                    content += '<span class="lisere DebriefeNon"></span>';
                                } else                      content += '<span class="lisere ' + removeSpaces(ev[i].StatutRDV__c) + '"></span>';

                                if(isMobile()) {
                                    content +='         <a href="javascript:sforce.one.navigateToSObject(\'' + ev[i].Id + '\')'+'" class="'+ ev[i].Id + '">';
                                } else {
                                    content += '        <a href="/' + ev[i].Id + '?retURL={!$CurrentPage.URL}" target="_blank" class="'+ ev[i].Id + '">';
                                }
                                content += '                ' + isDefined(ev[i].Type, '?') + ' - ' + date;
                                if(ev[i].Who != null)
                                    content += '                - ' + ev[i].Who.Name + '';
                                content += '            </a>';

                                // INJECTION : Cas d'un évènement Annexe
                                if(ev[i].RecordTypeId == '{!rtEventAnnexe}'){
                                    content += '        </h4>';
                                    content += '    </div>';
                                    content += '</div>';
                                } else {
                                    content += '            <a role="button" data-toggle="collapse" data-parent="#eventTab" href="#' + ev[i].Id + '" aria-expanded="f" aria-controls="' + ev[i].Id + '" class="pull-right">';
                                    content += '                <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>';
                                    content += '            </a>';
                                    content += '        </h4>';
                                    content += '    </div>';
                                    content += '    <div id="' + ev[i].Id + '" data-toggle="false" class="panel-collapse collapse" role="tabpanel" name="' + ev[i].Id + '"">';
                                    content += '        <div class="panel-body">';

                                    // INJECTION : Cas d'un évènement Annexe
                                    if(ev[i].RecordTypeId == '{!rtEventAnnexe}'){
                                        content += '<div class="panel panel-default">';
                                        content += '    <div class="panel-heading ' + isDefined(ev[i].Type, '?') + ' ' + ev[i].RecordTypeId + '" role="tab" id="headingOne">';
                                        content += '        <h4 class="panel-title">';
                                        content += '            <span class="lisere ' + removeSpaces(ev[i].StatutRDV__c) + '"></span>';
                                        content += '            <a href="/' + ev[i].Id + '?retURL={!$CurrentPage.URL}" target="_blank">';
                                        content += '                ' + ev[i].Type + ' - ' + date;
                                        if(ev[i].Who != null)
                                            content += '                - ' + ev[i].Who.Name + '';
                                        content += '            </a>';
                                        content += '        </h4>';
                                        content += '    </div>';
                                        content += '</div>';
                                    } else {
                                        // INJECTION-CONTENU : Cas d'un évènement de prospection
                                        if(ev[i].RecordTypeId == '{!rtEventProspection}'){
                                            content += '        <div class="row" >';
                                            if(ev[i].Type == 'Prospection physique' || ev[i].Type == 'Visite de pose') {
                                                content += '<div class="col-md-4 panel-field"><label for="BAL' + ev[i].Id + '" style="padding:5px;">BAL : </label><input type="text" class="form-control" id="BAL' + ev[i].Id + '" value="' + isDefined(ev[i].NbBAL50__c, '') + '" onchange="changeEvent(\'' + ev[i].Id + '\', \'BAL\')"></div>';
                                                content += '<div class="col-md-4 panel-field"><label for="TAP' + ev[i].Id + '" style="padding:5px;">TAP : </label><input type="text" class="form-control" id="TAP' + ev[i].Id + '" value="' + isDefined(ev[i].NbTAP51__c, '') + '" onchange="changeEvent(\'' + ev[i].Id + '\', \'TAP\')"></div>';
                                            }
                                            if(ev[i].Type == 'Phone')                   content += '<div class="col-md-4 panel-field"><label for="phone' + ev[i].Id + '" style="padding:5px;">Phone : </label><input type="text" class="form-control" id="phone' + ev[i].Id + '" value="' + isDefined(ev[i].NbPhone55__c, '') + '" onchange="changeEvent(\'' + ev[i].Id + '\', \'phone\')"></div>';
                                            if(ev[i].Type == 'Stand/Marché')            content += '<div class="col-md-4 panel-field"><label for="marché' + ev[i].Id + '" style="padding:5px;">Stand/marché : </label><input type="text" class="form-control" id="marché' + ev[i].Id + '" value="' + isDefined(ev[i].NbStandMarch54__c, '') + '" onchange="changeEvent(\'' + ev[i].Id + '\', \'marché\')"></div>';
                                            if(ev[i].Type == 'Stand/Galerie Marchande') content += '<div class="col-md-4 panel-field"><label for="GM' + ev[i].Id + '" style="padding:5px;">Stand/GM : </label><input type="text" class="form-control" id="GM' + ev[i].Id + '" value="' + isDefined(ev[i].NbStandGM42__c, '') + '" onchange="changeEvent(\'' + ev[i].Id + '\', \'GM\')"></div>';
                                            if(ev[i].Type == 'Foire')                   content += '<div class="col-md-4 panel-field"><label for="foire' + ev[i].Id + '" style="padding:5px;">Foire : </label><input type="text" class="form-control" id="foire' + ev[i].Id + '" value="' + isDefined(ev[i].NbFoire43__c, '') + '" onchange="changeEvent(\'' + ev[i].Id + '\', \'foire\')"></div>';

                                        // INJECTION-CONTENU : Cas d'un évènement Commercial
                                        } else if(ev[i].RecordTypeId == '{!rtEventCommercial}'){
                                            content += '        <div class="row" >';
                                            // Champ "Statut du RDV"
                                            content += '<div class="col-md-4 panel-field"><label for="statut' + ev[i].Id + '" style="padding:5px;">Statut du RDV : </label>';
                                            content += '    <select id="statut' + ev[i].Id + '" class="form-control" onchange="changeEvent(\'' + ev[i].Id + '\', \'statut\')">';
                                            if(ev[i].StatutRDV__c == annuleCallStatut && statutRDVList.indexOf(annuleCallStatut) == -1)
                                                statutRDVList.push(annuleCallStatut);
                                            for(var j=0; j<statutRDVList.length;j++){
                                                if(ev[i].StatutRDV__c == statutRDVList[j])
                                                    content += '        <option value="' + statutRDVList[j] + '" selected="selected">' + statutRDVList[j] + '</option>'; else content += '<option value="' + statutRDVList[j] + '">' + statutRDVList[j] + '</option>';
                                            }                                           content += '    </select>';
                                                                                        content += '</div>';

                                            // Champ "Decisionnaire"
                                                                                        content += '<div class="col-md-3 panel-field"><label for="decisionnaire' + ev[i].Id + '" style="padding:5px;">Décisionnaire présent : </label>';
                                                                                        content += '    <select id="decisionnaire' + ev[i].Id + '" class="form-control" onchange="changeEvent(\'' + ev[i].Id + '\', \'decisionnaire\')">';
                                            if(ev[i].Decisionnaire__c)                  content += '        <option value="Oui" selected="selected">Oui</option>'; else content += '<option value="Oui">Oui</option>';
                                            if(!ev[i].Decisionnaire__c)                 content += '        <option value="Non" selected="selected">Non</option>'; else content += '<option value="Non">Non</option>';
                                                                                        content += '    </select>';
                                                                                        content += '</div>';

                                            // Champ "Résultat du RDV"
                                            if(ev[i].ResultatduRDV__c != 'Non renseigné'){
                                                                                        content += '<div class="col-md-3 panel-field" id="showResultat' + ev[i].Id + '"><label for="resultat' + ev[i].Id + '" style="padding:5px;">Résultat du RDV : </label>';
                                                                                        content += '    <select id="resultat' + ev[i].Id + '" class="form-control" style="min-width:50%" onchange="changeEvent(\'' + ev[i].Id + '\', \'resultat\')">';
                                                for(var k=0; k<resultatRDVList.length;k++){
                                                    if(ev[i].ResultatduRDV__c == resultatRDVList[k])
                                                                                        content += '        <option value="' + resultatRDVList[k] + '" selected="selected">' + resultatRDVList[k] + '</option>';
                                                    else                                content += '        <option value="' + resultatRDVList[k] + '">' + resultatRDVList[k] + '</option>';
                                                }                                       content += '    </select>';
                                                                                        content += '</div>';
                                            } else                                      content += '<div class="col-md-3 panel-field" style="display:none;" id="showResultat' + ev[i].Id + '"><label for="resultat' + ev[i].Id + '" style="padding:5px;">Résultat du RDV : </label><select id="resultat' + ev[i].Id + '" class="form-control" onchange="changeEvent(\'' + ev[i].Id + '\', \'resultat\')"></select></div>';
                                            content += '        </div>';
                                            // Champ "Motif Annulation"
                                            content += '        <div class="row" >';
                                            if(motifAnnulation != '')                   content += '<div class="col-md-12 panel-field" id="showMotif' + ev[i].Id + '"><label for="motif' + ev[i].Id + '" style="padding:5px;">Motif annulation :  </label><input type="text" class="form-control" id="motif' + ev[i].Id + '" value="' + motifAnnulation + '" onchange="changeEvent(\'' + ev[i].Id + '\', \'motif\')"></div>';
                                            else                                        content += '<div class="col-md-12 panel-field" style="display:none;" id="showMotif' + ev[i].Id + '"><label for="motif' + ev[i].Id + '" style="padding:5px;">Motif annulation :  </label><input type="text" class="form-control" id="motif' + ev[i].Id + '" value="' + motifAnnulation + '" onchange="changeEvent(\'' + ev[i].Id + '\', \'motif\')"></div>';
                                            content += '        </div>';
                                        }

                                        // INJECTION-FIN : Alerte de sauvegarde / Bouton sauvegarde / Erreurs / Fermeture des balises
                                        content += '            </div>';
                                        content += '            <div class="row hidden" id="alerte' + ev[i].Id + '">';
                                        content += '                <div class="col-md-12 panel-field">';
                                        content += '                    <div class="alert alert-warning" role="alert">';
                                        content += '                        <p><strong>Attention ! </strong> Certains champs ont été modifiés. Cliquez sur le bouton pour sauvegarder les modifications.</p>';
                                        content += '                        <p><a href="#" id="event-button-save' + ev[i].Id + '" class="btn btn-success btn-lg" role="button" onclick="saveEvent(\'' + ev[i].Id + '\',\'' + ev[i].RecordTypeId + '\')" data-loading-text="Veuillez patientier...">Sauvegarder</a></p>';
                                        content += '                    </div>';
                                        content += '                </div>';
                                        content += '            </div>';
                                        content += '            <div class="row hidden" id="error' + ev[i].Id + '">';
                                        content += '                <div class="col-md-3">';
                                        content += '                    <div style="max-width:200px;" class="alert alert-danger">Veuillez entrer un nombre.</div>';
                                        content += '                </div>';
                                        content += '            </div>';
                                        content += '        </div>';
                                        content += '    </div>';
                                        content += '</div>';
                                    }
                                }
                            }
                        // Cas sans évènements
                        } else
                            j$('#noEvents').removeClass("hidden").addClass("show");

                        // Injection, mise à jour des couleurs, fermeture des panels
                        j$('[id=eventTab]').html(content);
                        setupEventColors();
                        j$('.panel-collapse').collapse("hide");
                        // RAZ chargement
                        toggleLoading(false, 'event');
                    } else if (event.type === 'exception') {
                        // RAZ chargement
                        toggleLoading(false, 'event');
                        alert(event.message);
                    } else {
                        // RAZ chargement
                        toggleLoading(false, 'event');
                        alert(event.message);
                    }
                },
                {buffer: false, escape: true}
            );

            // Récupère les taches d'un jour donné
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.Ctrl_CalendrierDashboard.getSelectedTasks}', jour, mois, annee,
                function(ta, event) {
                    if (event.status) {
                        // Mise à jour des indicateurs de taches
                        var content = '';
                        var mutedDate = 'Taches pour le ' + moment(actualDay).format("DD/MM/YYYY");
                        j$('[id=nbTasks]').html(ta.length);
                        j$('[id=mutedTaskDay]').html(mutedDate);

                        // Chargement des options pour les picklists dépendantes
                        var priorityTaskList = JSON.parse('{!JSENCODE(priorityTaskList)}');
                        var statutTaskList = JSON.parse('{!JSENCODE(statutTaskList)}');

                        // Cas avec au moins 1 tache
                        if(ta.length){
                            j$('#noTasks').removeClass("show").addClass("hidden");
                            for (i=0; i < ta.length; i++){
                                // Injection : Header
                                content += '<div class="panel panel-default">';
                                content += '    <div class="panel-heading" role="tab" id="headingOne">';
                                content += '        <h4 class="panel-title">';
                                content += '            <span class="lisere ' + removeSpaces(ta[i].Status) + '"></span>';
                                if(isMobile()) {
                                    content +='         <a href="javascript:sforce.one.navigateToSObject(\'' + ta[i].Id + '\')'+'">';
                                } else {
                                    content += '        <a href="/' + ta[i].Id + '?retURL={!$CurrentPage.URL}" target="_blank">';
                                }
                                content += '                ' + ta[i].Subject + ' - ' + ta[i].Owner.Name;
                                content += '            </a>';
                                content += '            <a role="button" data-toggle="collapse" data-parent="#taskTab" href="#' + ta[i].Id + '" aria-expanded="f" aria-controls="' + ta[i].Id + '}" class="pull-right">';
                                content += '                <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>';
                                content += '            </a>';
                                content += '        </h4>';
                                content += '    </div>';
                                content += '    <div id="' + ta[i].Id + '" data-toggle="false" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingOne" name="' + ta[i].Id + '">';
                                content += '        <div class="panel-body">';
                                content += '            <div class="row" >';

                                // Injection : Champ "Priorité"
                                content += '                <div class="col-md-3 panel-field"><label for="taskpriority' + ta[i].Id + '" style="padding:5px;">Priorité : </label>';
                                content += '                    <select id="taskpriority' + ta[i].Id + '" class="form-control" style="min-width:50%" onchange="changeEvent(\'' + ta[i].Id + '\', \'taskpriority\')">';
                                for(var j=0; j<priorityTaskList.length;j++){
                                    if(ta[i].Priority == priorityTaskList[j])
                                        content += '    <option value="' + priorityTaskList[j] + '" selected="selected">' + priorityTaskList[j] + '</option>';
                                    else
                                        content += '    <option value="' + priorityTaskList[j] + '">' + priorityTaskList[j] + '</option>';
                                }
                                content += '                    </select>';
                                content += '                </div>';

                                // Injection : Champ "Statut"
                                content += '                <div class="col-md-3 panel-field"><label for="taskStatut' + ta[i].Id + '" style="padding:5px;">Statut : </label>';
                                content += '                    <select id="taskStatut' + ta[i].Id + '" class="form-control" style="min-width:50%" onchange="changeEvent(\'' + ta[i].Id + '\', \'taskStatut\')">';
                                for(var j=0; j<statutTaskList.length;j++){
                                    if(ta[i].Status == statutTaskList[j])
                                        content += '    <option value="' + statutTaskList[j] + '" selected="selected">' + statutTaskList[j] + '</option>';
                                    else
                                        content += '    <option value="' + statutTaskList[j] + '">' + statutTaskList[j] + '</option>';
                                }
                                content += '                    </select>';
                                content += '                </div>';
                                content += '            </div>';

                                // Injection : Champ "Description (Commentaires)"
                                var taskDescription = (ta[i].Description) ? ta[i].Description : '';
                                content += '            <div class="row" >';
                                content += '                <div class="col-md-12 panel-field"><label for="taskDescription' + ta[i].Id + '" style="padding:5px;">Commentaires :  </label>';
                                content += '                <textarea class="form-control" rows="3" id="taskDescription' + ta[i].Id + '" onchange="changeEvent(\'' + ta[i].Id + '\', \'taskDescription\')" style="width: 100%;">' + taskDescription + '</textarea>';
                                content += '            </div>';
                                content += '        </div>';

                                // Injection : Alerte et bouton de sauvegarde
                                content += '            <div class="row hidden" id="alerte' + ta[i].Id + '">';
                                content += '                <div class="col-md-12 panel-field">';
                                content += '                    <div class="alert alert-warning" role="alert">';
                                content += '                        <p><strong>Attention ! </strong> Certains champs ont été modifiés. Cliquez sur le bouton pour sauvegarder les modifications.</p>';
                                content += '                        <p><a href="#" id="task-button-save' + ta[i].Id + '" class="btn btn-success btn-lg" role="button" onclick="saveTask(\'' + ta[i].Id + '\')" data-loading-text="Veuillez patientier...">Sauvegarder</a></p>';
                                content += '                    </div>';
                                content += '                </div>';
                                content += '            </div>';
                                content += '        </div>';
                                content += '    </div>';
                                content += '</div>';
                            }
                        // Cas sans taches
                        } else
                            j$('#noTasks').removeClass("hidden").addClass("show");

                        // Injection
                        j$('[id=taskTab]').html(content);
                        j$('.panel-collapse').collapse("hide");
                        // RAZ chargement
                        toggleLoading(false, 'task');
                    } else if (event.type === 'exception') {
                        // RAZ chargement
                        toggleLoading(false, 'task');
                        alert(event.message);
                    } else {
                        // RAZ chargement
                        toggleLoading(false, 'task');
                        alert(event.message);
                    }
                },
            {buffer: false, escape: true}
            );
        }

        /*--------------------------------------------------*/
        /* Afficher/cacher le chargement selon type         */
        /*--------------------------------------------------*/
        function toggleLoading(loading, type){
            var loadingDiv = (type == 'task') ? htmlLoadingTask : htmlLoadingEvent;
            var bodyDiv = (type == 'task') ? htmlBodyTask : htmlBodyEvent;

            if(loading) {
                // affiche chargement
                loadingDiv.removeClass("hidden").addClass("show");
                bodyDiv.removeClass("show").addClass("hidden");
            } else {
                // cache chargement
                loadingDiv.removeClass("show").addClass("hidden");
                bodyDiv.removeClass("hidden").addClass("show");
            }
        }

        /*--------------------------------------------------*/
        /* Formatage de date (Affichage en jj/mm/YYYY)      */
        /*--------------------------------------------------*/
        function formatDate(date){
            var dateFormatee;
            if(date != null){
                dateFormatee = moment(date).format("HH[h]mm");
            }
            return dateFormatee;
        }

        /*--------------------------------------------------*/
        /*  Fonction qui check si un champ est défini       */
        /*--------------------------------------------------*/
        function isDefined(variable, remplacement){
            if(variable == null) variable = remplacement;
            return variable;
        }

        /*--------------------------------------------------*/
        /*  Initialisation des couleurs des évènements      */
        /*--------------------------------------------------*/
        function setupEventColors() {
            // Panels
            j$( ".{!rtEventCommercial}" ).css( "background-color", "#0B00AD" );
            j$( ".{!rtEventCommercial}" ).css( "color", "white" );
            j$( ".R1" ).css( "background-color", "#00B2BD" );
            j$( ".R2" ).css( "background-color", "#6B72FF" );
            j$( ".{!rtEventProspection}" ).css( "background-color", "#f5c130" );
            j$( ".{!rtEventAnnexe}" ).css( "background-color", "#CECECE" );
        }

        /*--------------------------------------------------*/
        /*  Fonction d'alerte après modification d'un champ */
        /*--------------------------------------------------*/
        function changeEvent(eventId, fieldUpdated){
            var fieldId = fieldUpdated + '' + eventId;
            // Modification de la couleur du champ modifié et affichage de l'alert + bouton
            document.getElementById(fieldId).style.backgroundColor = '#fcf8e3';
            j$('#alerte' + eventId).removeClass("hidden").addClass("show");

            // Cas spécial du statut des évènements : Mise à jour des champs/picklist "Résultat du RDV" et "Motif"
            if(fieldUpdated == 'statut'){
                eventStatut = j$("[id$=statut"+eventId+"]")[0].value;
                var newResultatPickList = getNewPickListValues(eventStatut);
                var resultatContent = '';

                if(annuleCallStatut == eventStatut || newResultatPickList.length == 0){
                    j$('#showResultat' + eventId).removeClass("show").addClass("hidden");
                    j$('#showMotif' + eventId).removeClass("show").addClass("hidden");
                } else {
                    for(var i=0; i<newResultatPickList.length;i++)
                        resultatContent += '<option value="' + newResultatPickList[i] + '">' + newResultatPickList[i] + '</option>';
                    document.getElementById('resultat' + eventId).style.backgroundColor = '#fcf8e3';
                    j$('#showResultat' + eventId).removeClass("hidden").addClass("show");
                    if(eventStatut == effectueStatut)
                        j$('#showMotif' + eventId).removeClass("show").addClass("hidden");
                    else
                        j$('#showMotif' + eventId).removeClass("hidden").addClass("show");
                }
                j$('[id=resultat'+eventId+']').html(resultatContent);
            } else if(fieldUpdated == 'resultat'){
                eventResultat = j$("[id$=resultat"+eventId+"]")[0].value;
                if(eventResultat == 'Devisable' || eventResultat == 'Devis transmis')
                    j$('#showMotif' + eventId).removeClass("show").addClass("hidden");
                if(eventResultat == 'Non devisable')
                    j$('#showMotif' + eventId).removeClass("hidden").addClass("show");
            }
        }

        /*--------------------------------------------------*/
        /*  Fonction de sauvegarde d'un évènement           */
        /*--------------------------------------------------*/
        function saveEvent(eventId, eventRecordType){
            // Désactivation boutton sauvegarde et annuler
            j$("#event-button-save"+eventId).button('loading');

            // Cas d'un évènement Commercial
            if(eventRecordType == '{!rtEventCommercial}'){
                // Récupération de la valeur des champs de l'évènement sauvegardé
                var eventStatut = j$("[id$=statut"+eventId+"]")[0].value;
                var eventDeci = j$("[id$=decisionnaire"+eventId+"]")[0].value;
                var eventResultat = '';
                var eventMotif = '';
                if(j$( "#resultat"+eventId).length)
                    eventResultat = j$("[id$=resultat"+eventId+"]")[0].value;
                if(j$( "#motif"+eventId).length)
                    eventMotif = j$("[id$=motif"+eventId+"]")[0].value;

                // Mise à jour de l'évènement
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.Ctrl_CalendrierDashboard.updateEventCommercial}', eventId, eventStatut, eventDeci, eventResultat, eventMotif,
                    function(result, event) {
                        if (event.status) {
                            j$("#event-button-save"+eventId).button('reset');
                            // Suppression de l'alerte de sauvegarde et de la couleur jaune sur les champs modifiés (et désormais sauvegardés)
                            document.getElementById('statut' + eventId).style.backgroundColor = '#ffffff';
                            document.getElementById('decisionnaire' + eventId).style.backgroundColor = '#ffffff';
                            if(j$( "#resultat"+eventId).length)
                                document.getElementById('resultat' + eventId).style.backgroundColor = '#ffffff';
                            if(j$( "#motif"+eventId).length)
                                document.getElementById('motif' + eventId).style.backgroundColor = '#ffffff';
                            j$('#alerte' + eventId).removeClass("show").addClass("hidden");
                        } else if (event.type === 'exception') {
                            j$("#event-button-save"+eventId).button('reset');
                            alert(event.message);
                        } else {
                            j$("#event-button-save"+eventId).button('reset');
                            alert(event.message);
                        }
                    },
                    {buffer: false, escape: true}
                );
            // Cas d'un évènement de prospection
            } else if(eventRecordType == '{!rtEventProspection}'){
                var fieldValue = '';
                var fieldName = '';
                var fieldValueTAP = '';
                // Récupération du type de prospection et de la valeur du champ
                if(j$( "#BAL"+eventId).length || j$( "#TAP"+eventId).length){
                    fieldValue = j$("[id$=BAL"+eventId+"]")[0].value;
                    fieldName = 'BAL';
                    fieldValueTAP = j$("[id$=TAP"+eventId+"]")[0].value;
                } else if(j$( "#phone"+eventId).length){
                    fieldValue = j$("[id$=phone"+eventId+"]")[0].value;
                    fieldName = 'phone';
                } else if(j$( "#marché"+eventId).length){
                    fieldValue = j$("[id$=marché"+eventId+"]")[0].value;
                    fieldName = 'marché';
                } else if(j$( "#GM"+eventId).length){
                    fieldValue = j$("[id$=GM"+eventId+"]")[0].value;
                    fieldName = 'GM';
                } else if(j$( "#foire"+eventId).length){
                    fieldValue = j$("[id$=foire"+eventId+"]")[0].value;
                    fieldName = 'foire';
                }
                if(fieldValue == '') fieldValue = '0';
                if(fieldValueTAP == '') fieldValueTAP = '0';
                // Validation du champ (regex) et affichage des erreurs éventuelles
                var verifValue = validateNumber(fieldValue);
                var verifValueTAP = validateNumber(fieldValueTAP);
                // Erreur si echec de validation
                if(!verifValue || !verifValueTAP) {
                    j$('#error' + eventId).removeClass("hidden").addClass("show");
                    j$("#event-button-save"+eventId).button('reset');
                } else {
                    // Mise à jour de l'évènement
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.Ctrl_CalendrierDashboard.updateEventProspection}', eventId, fieldValue, fieldValueTAP, fieldName,
                        function(result, event) {
                            if (event.status) {
                                j$("#event-button-save"+eventId).button('reset');
                                // Suppression de l'alerte de sauvegarde et de la couleur jaune sur les champs modifiés (et désormais sauvegardés)
                                document.getElementById(fieldName + '' + eventId).style.backgroundColor = '#ffffff';
                                if(j$( "#BAL"+eventId).length)
                                    document.getElementById('BAL' + eventId).style.backgroundColor = '#ffffff';
                                if(j$( "#TAP"+eventId).length)
                                    document.getElementById('TAP' + eventId).style.backgroundColor = '#ffffff';
                                j$('#alerte' + eventId).removeClass("show").addClass("hidden");
                                j$('#error' + eventId).removeClass("show").addClass("hidden");
                            } else if (event.type === 'exception') {
                                j$("#event-button-save"+eventId).button('reset');
                                alert(event.message);
                            } else {
                                j$("#event-button-save"+eventId).button('reset');
                                alert(event.message);
                            }
                        },
                        {buffer: false, escape: true}
                    );
                }
            }
        }

        /*--------------------------------------------------*/
        /*  Fonction de sauvegarde d'une tache              */
        /*--------------------------------------------------*/
        function saveTask(taskId){
            // Récupération de la valeur des champs
            var taskPriority = j$("[id$=taskpriority"+taskId+"]")[0].value;
            var taskStatut = j$("[id$=taskStatut"+taskId+"]")[0].value;
            var taskDescription = j$("[id$=taskDescription"+taskId+"]")[0].value;
            // Désactivation boutton sauvegarde et annuler
            j$("#task-button-save"+taskId).button('loading');

            // Mise à jour de la tache
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.Ctrl_CalendrierDashboard.updateTask}', taskId, taskPriority, taskStatut, taskDescription,
                function(result, event) {
                    if (event.status) {
                        j$("#task-button-save"+taskId).button('reset');
                        // Suppression de l'alerte de sauvegarde et de la couleur jaune sur les champs modifiés (et désormais sauvegardés)
                        document.getElementById('taskpriority' + taskId).style.backgroundColor = '#ffffff';
                        document.getElementById('taskStatut' + taskId).style.backgroundColor = '#ffffff';
                        document.getElementById('taskDescription' + taskId).style.backgroundColor = '#ffffff';
                        j$('#alerte' + taskId).removeClass("show").addClass("hidden");
                    } else if (event.type === 'exception') {
                        j$("#task-button-save"+taskId).button('reset');
                        alert(event.message);
                    } else {
                        j$("#task-button-save"+taskId).button('reset');
                        alert(event.message);
                    }
                },
                {buffer: false, escape: true}
            );
        }

        /*--------------------------------------------------*/
        /*  Récupération de la picklist dépendante          */
        /*--------------------------------------------------*/
        function getNewPickListValues(eventStatut){
            // Récupère les Résultats de RDV possibles (pour picklist) en fonction du Statut du RDV de l'évènement
            var picklistValues;
            if(eventStatut == deplaceStatut) picklistValues = JSON.parse('{!JSENCODE(resultatRDVListDepl)}');
            if(eventStatut == effectueStatut) picklistValues = JSON.parse('{!JSENCODE(resultatRDVListEff)}');
            if(eventStatut == nonConfirmeStatut) picklistValues = JSON.parse('{!JSENCODE(resultatRDVListNonConf)}');
            if(eventStatut == nonEffectueStatut) picklistValues = JSON.parse('{!JSENCODE(resultatRDVListNonEff)}');
            if(eventStatut == nonEffectueDeplacementStatut) picklistValues = JSON.parse('{!JSENCODE(resultatRDVListNonEffDepl)}');
            if(eventStatut == prisStatut) picklistValues = JSON.parse('{!JSENCODE(resultatRDVListPris)}');
            return picklistValues;
        }

        /*--------------------------------------------------*/
        /*  Regex pour valeurs numériques uniquement        */
        /*--------------------------------------------------*/
        function validateNumber(prospection) {
            if(prospection == '' || prospection == null) prospection = 0;
            var regex = /^[0-9]*$/;
            return regex.test(prospection);
        }

        /*--------------------------------------------------*/
        /*  Gestion des liens Navigateur/SF1                */
        /*--------------------------------------------------*/
        function createObject(name, recordType) {
            // Salesforce1 / Lightning navigation
            if( (typeof sforce != 'undefined') && (sforce != null) ) {
                if(recordType == 'null') {
                    var defaults = {ActivityDate : moment(actualDay).format("YYYY-MM-DD")};
                    sforce.one.createRecord(name, "{!rtTaskVendeur}", defaults);
                } else {
                    var formatStr = "YYYY-MM-DD[T]HH:mm:ss[Z]";
                    var startTime = moment(actualDay).set('hour', moment().utc().hour());
                    var endTime = moment(actualDay).set('hour', moment().utc().hour()+1);
                    var defaults = {StartDateTime : startTime.format(formatStr), EndDateTime : endTime.format(formatStr)};
                    sforce.one.createRecord(name, recordType, defaults);
                }
            } else {
                // Set the window's URL using a Visualforce expression
                var link = '';
                var dateToday = moment(actualDay).format("DD/MM/YYYY");
                if(name == 'Event') {
                    link = '{!URLFOR($Action.Activity.NewEvent, null, [retURL=$CurrentPage.URL])}' + '&RecordType=' + recordType + '&StartDateTime=' + dateToday + '&EndDateTime=' + dateToday;
                } else if(name == 'Task') {
                    link = '{!URLFOR($Action.Task.NewTask, null, [retURL=$CurrentPage.URL])}' + '&tsk4=' + dateToday;
                }
                window.open(link);
            }
        }

        /*--------------------------------------------------*/
        /* Formatage des espaces                            */
        /*--------------------------------------------------*/
        function removeSpaces(text){
            if(text != null){
                var newText = text.replace(/ /g,'');
                return newText;
            } else return null;
         }

        /*--------------------------------------------------*/
        /*  Check pour le cas d'un mobile                   */
        /*--------------------------------------------------*/
        function isMobile() {
            if( navigator.userAgent.match(/Android/i)
                || navigator.userAgent.match(/webOS/i)
                // || navigator.userAgent.match(/iPhone/i)
                // || navigator.userAgent.match(/iPad/i)
                // || navigator.userAgent.match(/iPod/i)
                || navigator.userAgent.match(/BlackBerry/i)
                || navigator.userAgent.match(/Windows Phone/i)
                || ((typeof sforce != 'undefined') && (sforce != null) )
            ) return true;
            else return false;
        }
    </script>
    <style type="text/css">
         .lisere {
            height:18px;
            margin-right:11px;
            width:7px;
            display:block;
            float:left;
            border-bottom-right-radius: 3px;
            border-bottom-left-radius: 3px;
            border-top-right-radius: 3px;
            border-top-left-radius: 3px;
         }
        .Pris, .Afaire, .DebriefeNon { background-color: red }
        .Nonconfirmé { background-color: orange }
        .Effectué, .Terminé, .DebriefeOui { background-color: green }
        .Noneffectué { background-color: black }
        .Déplacé { background-color: violet }
        .AnnuléCall { background-color: grey }

         .ui-loader-default {
            display: none;
         }

         .panel-field {
            margin-top: 5px;
            margin-bottom: 5px;
         }
    </style>

    <apex:stylesheet value="{!URLFOR($Resource.KparK_Page_CSS)}"/>
    <apex:stylesheet value="{!URLFOR($Resource.bootstrapDatepicker_js, 'css/datepicker.css')}"/>
    <c:importvisualstrap theme="default" />
    <!-- NE SURTOUT PAS UTILISER LE COMPOSANT c:VISUALSTRAPBLOCK -->
    <apex:outputPanel styleClass="visualstrap visualstrap-flatly visualstrap-lumen visualstrap-superhero" layout="block">
        <center>
            <c:pageheader title="Débrief rapide" icon="flash" subtitle="{!$User.FirstName} {!$User.LastName}" style="margin-bottom: 10px;"/>
        </center>

        <apex:form styleClass="form-inline">
            <apex:actionFunction action="{!refreshDate}" name="updateStartDate" rerender="hiddenFields">
                <apex:param name="firstParam" assignTo="{!selectedDate}" value="this.value" />
            </apex:actionFunction>
            <input style="height:0px; top:-1000px; position:absolute" type="text" value=""/><br/>
            <div class="row" style="margin-bottom: 10px;" >
                <div class="col-md-12">
                    <div style="max-width:140px; display: inline-flex; float:left; margin-right:10px;">
                        <div class='input-group date' id='input-datetimepicker-start'>
                            <input type='text' class="form-control" id="selectedDate" autocomplete="off" value="{!selectedDate}"/>
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </div>
                    <div class="col-md-3" style="display: inline-flex;">
                        <div class="btn-group" role="group" aria-label="..." >
                            <button type="button" class="btn btn-default" id="filter-button-dayBefore" onClick="switchDay('clickleft');"><span class="glyphicon glyphicon-minus"></span></button>
                            <button type="button" class="btn btn-default" id="filter-button-dayAfter" onClick="switchDay('clickright');"><span class="glyphicon glyphicon-plus"></span></button>
                            <button type="button" class="btn btn-default" id="filter-button-refresh" onClick="switchDay('today');"><span class="glyphicon glyphicon-refresh"></span></button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- PANEL DES EVENEMENTS -->
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h5 style="cursor: pointer;">
                        <a id="panelEventTitle" data-toggle="collapse" data-target="#panelEvent" class="panel-title">Evénements</a>
                    </h5>
                </div>
                <div class="panel-body" id="panelEvent">
                    <div id="loading-event" class="section section-loading show">
                        <span class="loader loader-quart"></span>
                        Chargement en cours... Veuillez patienter
                    </div>
                    <div id="panelEvent-body" class="hidden">
                        <c:well style="text-align:center;">
                            <c:glyph icon="time" style="font-size:40px"/> &nbsp;<span style="font-size:54px" id="nbEvents"></span>
                            <p id="mutedEventDay" class="text-muted">Evénements pour aujourd'hui</p>
                            <a class="btn btn-primary" href="" onClick="createObject('Event', '{!rtEventCommercial}')">RDV Commercial</a>
                            <a class="btn btn-primary" href="" onClick="createObject('Event', '{!rtEventProspection}')">Prospection</a>
                            <a class="btn btn-primary" href="" onClick="createObject('Event', '{!rtEventAnnexe}')">Autre</a>
                        </c:well>
                        <div class="panel-group" id="eventTab" role="tablist" aria-multiselectable="true">

                        </div>
                        <div id="noEvents" class="hidden">
                            <c:alert type="success" style="text-align:center">
                                <c:glyph icon="ok-sign"/> {!$Label.AucunEnregTrouve}
                            </c:alert>
                        </div>
                    </div>
                 </div>
             </div>

            <!-- PANEL DES TACHES -->
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h5 style="cursor: pointer;">
                        <a id="panelTaskTitle" data-toggle="collapse" data-target="#panelTask" class="panel-title">Tâches</a>
                    </h5>
                </div>
                <div class="panel-body" id="panelTask">
                    <div id="loading-task" class="section section-loading show">
                        <span class="loader loader-quart"></span>
                        Chargement en cours... Veuillez patienter
                    </div>
                    <div id="panelTask-body" class="hidden">
                        <c:well style="text-align:center;">
                            <c:glyph icon="tasks" style="font-size:40px"/> &nbsp;<span id="nbTasks" style="font-size:54px"></span>
                            <p id="mutedTaskDay" class="text-muted">Tâches à faire pour aujourd'hui</p>
                            <a class="btn btn-primary" href="" onClick="createObject('Task', 'null')">Nouvelle Tâche</a>
                        </c:well>
                        <div class="panel-group" id="taskTab" role="tablist" aria-multiselectable="true">

                        </div>
                        <div id="noTasks" class="hidden">
                            <c:alert type="success" style="text-align:center">
                                <c:glyph icon="ok-sign"/> {!$Label.AucunEnregTrouve}
                            </c:alert>
                        </div>
                    </div>
                </div>
             </div>
        </apex:form>
     </apex:outputPanel>
</apex:page>